/*!
	@mainpage A Multiscale Differential Complex - Short Mathematical Problem Description
	
	@tableofcontents

		
	@section sec1 The de Rham Complex with Rough Weighting
	
	The purpose of this work is to introduce a unifiying framework
	for the construction of stable pairings of conforming multiscale
	finite elements in all spaces across the \f$L^2\f$-Hilbert complex
	
	@f{eqnarray}{
	
		0
		\stackrel{}{\rightarrow}
		L^2\Lambda^0(\Omega,A_{\varepsilon, 0})
		\stackrel{\nabla}{\longrightarrow}
		L^2\Lambda^1(\Omega,A_{\varepsilon, 1})
		\stackrel{\nabla\times}{\longrightarrow}
		L^2\Lambda^2(\Omega,A_{\varepsilon, 2})
		\stackrel{\nabla\cdot}{\longrightarrow}
		L^2\Lambda^3(\Omega,A_{\varepsilon, 3})
		\stackrel{}{\rightarrow}
		0
	  	
  	@f}
  	
  	whose domain complex is a modified \f$L^2\f$-de Rham complex.
  	
  	@f{eqnarray}{
	
		0
		\stackrel{}{\rightarrow}
		H(\mathrm{grad}, \Omega, A_{\varepsilon, 0})
		\stackrel{\nabla}{\longrightarrow}
		H(\mathrm{curl}, \Omega, A_{\varepsilon, 1})
		\stackrel{\nabla\times}{\longrightarrow}
		H(\mathrm{div}, \Omega, A_{\varepsilon, 2})
		\stackrel{\nabla\cdot}{\longrightarrow}
		L^2(\Omega, A_{\varepsilon, 3})
		\stackrel{}{\rightarrow}
		0
	  	
  	@f}
  		
	for the Hodge-Laplace equation when weighted with rough coefficients.
	
	This amouts to either solving scalar Laplace equations with rough
	coefficients in standard or mixed form or to solving vector valued Laplace
	equations in mixed form in spaces whose scalar procucts are weighted with
	rough positive coefficient functions. The latter seeks an (orthogonal) Helmholtz-Hodge
	decomposition (generalized Helmholtz decomposition) into threee types of functions: 
	curl-free fields, divergence-free fields and so called hamonic forms with different
	boundary conditions dependent on the auxiliary variable chosen.   
	 

	
	@section sec2 The Hodge-Laplace Problem with Rough Coeffients
	
	We consider a modified Hodge-Laplace equation on the unit square
	\f$\Omega = [0,1]^3 \f$:
		
	@f{eqnarray}{
	
	\mathrm{d}(A_{\varepsilon ,k+1}^{-1} \mathrm{d}^\ast)u_k + \mathrm{d}^\ast(A_{\varepsilon, k+1} \mathrm{d})u_k = f_k - P_{\mathfrak{h}^k}
	
	@f}		
	
	for positive coefficients \f$A_\varepsilon^k\f$ and \f$k=0,\dots ,3\f$.
	
	In 3D this essentially amounts in two different equation - a scalar one and a vectorial one. The scalar case reads	
	 
	@f{eqnarray}{
	
	\nabla\cdot(A_\varepsilon \nabla u) = f - P_\mathfrak{h}
	
	@f}
	
	and the vector case reads
	
	@f{eqnarray*}{
	
	\nabla\times(A_\varepsilon \nabla\times u) + \nabla(B_\varepsilon \nabla\cdot u) = f - P_\mathfrak{h}
	
	@f}
	 
	apart from possibly switching the roles of the coeffcients. 
	
	@note We solve the equation on prototypically on the unit cube. Although more complicated domains are easily
	possible we do not take into account harmonic forms for the vector Laplacian. That means that the 3D domains 
	should not have voids or handles. This will be changed in the future.

	Our method describes a stable multiscale discretization for relatively coarse meshes, i.e., 
	we generate bounded projections such that the diagram 
	@f{eqnarray*}{
	
		\newcommand{\ra}[1]{\kern-1.5ex\xrightarrow{\ \ #1\ \ }\phantom{}\kern-1.5ex}
		\newcommand{\ras}[1]{\kern-1.5ex\xrightarrow{\ \ \smash{#1}\ \ }\phantom{}\kern-1.5ex}
		\newcommand{\da}[1]{\bigg\downarrow\raise.5ex\rlap{\scriptstyle#1}}

	   	\begin{array}{ccccccc}
			H(\mathrm{grad}, \Omega, A_{\varepsilon, 0}) & 
			\ra{\nabla} & 
			H(\mathrm{curl}, \Omega, A_{\varepsilon, 1}) & 
			\ra{\nabla\times} & 
			H(\mathrm{div}, \Omega, A_{\varepsilon, 2}) & 
			\ra{\nabla\cdot} & 
			L^2(\Omega, A_{\varepsilon, 3})
			\\
		 	\da{\Pi_{\textsf{ms}}^{\mathsf{grad}}} & 
		 	& 
		 	\da{\Pi_{\textsf{ms}}^{\mathsf{curl}}} & 
		 	& 
		 	\da{\Pi_{\textsf{ms}}^ {\mathsf{div}}} & 
		 	& 
		 	\da{\Pi_{\textsf{ms}}^{L^2}} 
		 	\\			 
			\mathcal{Q}^{\textsf{ms}} & 
			\ras{\nabla} & 
			\mathcal{Ned}^{\textsf{ms}} & 
			\ras{\nabla\times} & 
			\mathcal{RT}^{\textsf{ms}} & 
			\ras{\nabla\cdot} & 
			\mathcal{DQ}^{\textsf{ms}}
			\\
		\end{array}
		 
	@f}
	commutes. That means that is discrete sequence is a subcomplex of the original one.
	
	@section sec3 Notes about the Code
	
	The code is
	<ul>
		<li> implemented in 3D using the deal.ii library
		<li> MPI parallel and can be used on clusters (grids and solvers are parallelized)
		<li> documented using doxygen
		<li> mathematically documented in an upcoming paper
		<li> available under a LPGL license (see license, note that other parts have different licenses)
 	</ul>
 	
 	@subsection sec31 Parameter Files
 	
 	The code produces one executable to solve the Hodge-Laplcae problem for each
 	segment of the complex described above. Each executable takes as an input a parameter
 	file containing information about the problems to be solved devided in three sections
 	<ol>
 		<li> Paramters for the standard method (for a comparison)
 		<li> Paramters for the multiscale method
 		<li> Paramters for the equation data
 	</ol>
 	sample paramter files are provided in the <code>example_parameters/</code> subfolder of the code directory.
 	
 	If you, for example, want to solve the multiscale Hodge-Laplace problem for 2-forms (i.e., with modified
 	Nedelec-Raviart-Thomas element pairings) you need to call
 	@code
 		../your_build_dir> mpirun -n N source/MsFEC_Ned_RT -p my_paramter_file.in
 	@endcode
 	
 	An example parameter file can look like
 	@code
 		# Example parameter file "my_paramter_file.in"
 	
 		subsection Standard method parameters
			subsection Mesh
				# number of global refinements 
		  		set refinements = 6
			end
		  
			subsection Control flow
				# compute flag for standard solution
			  	set compute solution = true
			  
			  	# verbose
			  	set verbose = true
			  
			  	# what solver to use
			  	set use direct solver = false
			  
			  	# renumbering to reduce bandwidth
			  	set dof renumbering = false
		  	end
		  	
		  	# name of outputfile without ending
		  	set filename output = test-01_NED-RT-Std
		  	
		  	# name of outputfile without ending
		  	set dirname output = data_test-01_NED-RT
		  	
		  	# compare to manufactured exact solution u=Ax+b
		  	set use exact solution = false
		end
		
		
		subsection Multiscale method parameters
			subsection Mesh
		  		set global refinements = 2
		  		set local refinements = 4
			end
		  
			subsection Control flow
				# compute flag
			  	set compute solution = true
			  
			  	# verbose
			  	set verbose = true
			  	set verbose basis = false
			  
			  	# what solver to use
			  	set use direct solver = false
			  	set use direct solver basis = false
			  
			  	# renumbering to reduce bandwidth
			  	set dof renumbering = false
			  	
			  	# write first basis
			  	set write first basis = true 
		  	end
		  	
		  	# name of outputfile without ending
		  	set filename output = test-01_NED-RT-Ms
		  	
		  	# name of outputfile without ending
		  	set dirname output = data_test-01_NED-RT
		  	
		  	# compare to exact solution
		  	set use exact solution = false
		end
		
		
		subsection Equation parameters
			subsection Right-hand side
				set Function constants  = scale=100
				
				# This is the gradient of the H^1_0-function 
				# V=scale*x*y*z*(x-1)*(y-1)*(z-1)
				# and hence curl(u)=0 for zero (natural) BCs
				set Function expression = scale*(2*x-1)*(y^2-y)*(z^2-z); scale*(2*y-1)*(x^2-x)*(z^2-z); scale*(2*z-1)*(x^2-x)*(y^2-y)		
			
				# The name of the variables as they will be used in the function, separated
				# by ','.
				set Variable names      = x,y,z
			end
			
			# Note that the exact solution is only there 
			# to verify the standard method
			subsection Exact solution
				# The manufactured exact solution is just a linear 
				# function u=Ax+b.
				# The right hand side is computed automatically
				
				# Here the matrix values of A
				set a_00 = 1
				set a_01 = 1
				set a_02 = 0
				
				set a_10 = 0.5
				set a_11 = 2
				set a_12 = -1
				
				set a_20 = 0
				set a_21 = -1
				set a_22 = -1
				
				# Here the vector values of b
				set b_0 = 1
				set b_1 = 1
				set b_2 = 1		
			end
			
			subsection Diffusion A
				set frequency x = 17
				set frequency y = 16
				set frequency z = 15
				
				# scaling parameter
				set scale x = 1.0
				set scale y = 1.0
				set scale z = 1.0
				
				# scaling parameter to set the contrast
				set alpha x = 0.9
				set alpha y = 0.9
				set alpha z = 0.9
				
				# Rotate with fixed Euler angles
				set rotate = true
			end
			
			subsection Diffusion B
				set frequency = 14
				set scale = 1
				set alpha = 0.9
				
				# Separate vector valued expressions by ';' as ',' is used internally by the
				# function parser.
				set Function expression = scale * (1.0 - alpha * sin(2*pi*frequency*x))
			end
		end 		
 	@endcode  
*/
